'use strict';
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import {window, commands, Disposable, ExtensionContext, StatusBarAlignment, StatusBarItem, TextDocument} from 'vscode';

declare function require(x: string): any;

var exec = require('child_process').exec;

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: ExtensionContext) {

  console.log('Congratulations, your extension "bellterm" is now active!');
    
  let wordCounter = new WordCounter();
  let wordCounterController = new WordCounterController(wordCounter);
  
  let disposable = commands.registerCommand('extension.sayHello', () => {
    exec('ls /', printStdout);
    window.showInformationMessage('Hello VScode Extentions!');
    wordCounter.updateWordCount();
  });

  context.subscriptions.push(wordCounter);
  context.subscriptions.push(wordCounterController);
  context.subscriptions.push(disposable);
}

function printStdout(err: string, stdout: string, stderr: string) {
  window.showInformationMessage(stdout.split(' ')[0]);
  window.showInformationMessage('Poe');
}

class WordCounter {
  private _statusBarItem: StatusBarItem;

  public updateWordCount() {
    if (!this._statusBarItem) {
      this._statusBarItem = window.createStatusBarItem(StatusBarAlignment.Left);
    }

    let editor = window.activeTextEditor;
    if (!editor) {
      this._statusBarItem.hide();
      return;
    }

    let doc = editor.document;

    if (doc.languageId === "markdown") {
      let wordCount = this._getWordCount(doc);
      this._statusBarItem.text = wordCount !== 1 ? `${wordCount} Words` : `1 Word`;
      this._statusBarItem.show();
    } else {
      this._statusBarItem.hide();
    }
  }
  
  public _getWordCount(doc: TextDocument): number {

    let docContent = doc.getText();

    // Parse out unwanted whitespace so the split is accurate
    docContent = docContent.replace(/(< ([^>]+)<)/g, '').replace(/\s+/g, ' ');
    docContent = docContent.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    let wordCount = 0;
    if (docContent != "") {
        wordCount = docContent.split(" ").length;
    }

    return wordCount;
  }

  dispose() {
    this._statusBarItem.dispose();
  }

}

class WordCounterController {

  private _wordCounter: WordCounter;
  private _disposable: Disposable;

  constructor(wordCounter: WordCounter) {
    this._wordCounter = wordCounter;
    this._wordCounter.updateWordCount();

    // subscribe to selection change and editor activation events
    let subscriptions: Disposable[] = [];
    window.onDidChangeTextEditorSelection(this._onEvent, this, subscriptions);
    window.onDidChangeActiveTextEditor(this._onEvent, this, subscriptions);

    // update the counter for the current file
    this._wordCounter.updateWordCount();

    // create a combined disposable from both event subscriptions
    this._disposable = Disposable.from(...subscriptions);
  }

  dispose() {
    this._disposable.dispose();
  }

  private _onEvent() {
    this._wordCounter.updateWordCount();
  }
}
